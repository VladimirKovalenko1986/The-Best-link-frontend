import { useRef } from "react";

const formStyles = {
  display: "grid",
  width: 320,
  gap: 8,
  padding: 8,
  border: "1px solid black",
};
const textStyle = {
  width: 600,
};

export default function RefExample() {
  const formRef = useRef();
  const handleScroll = () => {
    console.log(formRef.current.getBoundingClientRect());
    const form = formRef.current;
    const dims = form.getBoundingClientRect();

    window.scrollTo({
      top: dims.top,
      behavior: "smooth",
    });
  };

  return (
    <>
      <div>
        <button onClick={handleScroll}>Schedule a coaching session</button>
      </div>
      <div>
        <p style={textStyle}>
          ндикатор завантаження Під час виконання HTTP-запиту користувач замість
          компонента бачить порожній блок інтерфейсу, що абсолютно не
          інформативно. Тому під час HTTP-запиту потрібно відображати індикатор
          завантаження. Індикатор видно, доки запит виконується, і як тільки він
          завершується, індикатор приховується, а замість нього відображається
          компонент із завантаженими даними. ндикатор завантаження Під час
          виконання HTTP-запиту користувач замість компонента бачить порожній
          блок інтерфейсу, що абсолютно не інформативно. Тому під час
          HTTP-запиту потрібно відображати індикатор завантаження. Індикатор
          видно, доки запит виконується, і як тільки він завершується, індикатор
          приховується, а замість нього відображається компонент із
          завантаженими даними. ндикатор завантаження Під час виконання
          HTTP-запиту користувач замість компонента бачить порожній блок
          інтерфейсу, що абсолютно не інформативно. Тому під час HTTP-запиту
          потрібно відображати індикатор завантаження. Індикатор видно, доки
          запит виконується, і як тільки він завершується, індикатор
          приховується, а замість нього відображається компонент із
          завантаженими даними. ндикатор завантаження Під час виконання
          HTTP-запиту користувач замість компонента бачить порожній блок
          інтерфейсу, що абсолютно не інформативно. Тому під час HTTP-запиту
          потрібно відображати індикатор завантаження. Індикатор видно, доки
          запит виконується, і як тільки він завершується, індикатор
          приховується, а замість нього відображається компонент із
          завантаженими даними.ндикатор завантаження Під час виконання
          HTTP-запиту користувач замість компонента бачить порожній блок
          інтерфейсу, що абсолютно не інформативно. Тому під час HTTP-запиту
          потрібно відображати індикатор завантаження. Індикатор видно, доки
          запит виконується, і як тільки він завершується, індикатор
          приховується, а замість нього відображається компонент із
          завантаженими даними.ндикатор завантаження Під час виконання
          HTTP-запиту користувач замість компонента бачить порожній блок
          інтерфейсу, що абсолютно не інформативно. Тому під час HTTP-запиту
          потрібно відображати індикатор завантаження. Індикатор видно, доки
          запит виконується, і як тільки він завершується, індикатор
          приховується, а замість нього відображається компонент із
          завантаженими даними.ндикатор завантаження Під час виконання
          HTTP-запиту користувач замість компонента бачить порожній блок
          інтерфейсу, що абсолютно не інформативно. Тому під час HTTP-запиту
          потрібно відображати індикатор завантаження. Індикатор видно, доки
          запит виконується, і як тільки він завершується, індикатор
          приховується, а замість нього відображається компонент із
          завантаженими даними.ндикатор завантаження Під час виконання
          HTTP-запиту користувач замість компонента бачить порожній блок
          інтерфейсу, що абсолютно не інформативно. Тому під час HTTP-запиту
          потрібно відображати індикатор завантаження. Індикатор видно, доки
          запит виконується, і як тільки він завершується, індикатор
          приховується, а замість нього відображається компонент із
          завантаженими даними.ндикатор завантаження Під час виконання
          HTTP-запиту користувач замість компонента бачить порожній блок
          інтерфейсу, що абсолютно не інформативно. Тому під час HTTP-запиту
          потрібно відображати індикатор завантаження. Індикатор видно, доки
          запит виконується, і як тільки він завершується, індикатор
          приховується, а замість нього відображається компонент із
          завантаженими даними.ндикатор завантаження Під час виконання
          HTTP-запиту користувач замість компонента бачить порожній блок
          інтерфейсу, що абсолютно не інформативно. Тому під час HTTP-запиту
          потрібно відображати індикатор завантаження. Індикатор видно, доки
          запит виконується, і як тільки він завершується, індикатор
          приховується, а замість нього відображається компонент із
          завантаженими даними.ндикатор завантаження Під час виконання
          HTTP-запиту користувач замість компонента бачить порожній блок
          інтерфейсу, що абсолютно не інформативно. Тому під час HTTP-запиту
          потрібно відображати індикатор завантаження. Індикатор видно, доки
          запит виконується, і як тільки він завершується, індикатор
          приховується, а замість нього відображається компонент із
          завантаженими даними.
        </p>
        <p style={textStyle}>
          У React немає вбудованого модуля для роботи з HTTP-запитами, тому ми
          можемо використовувати звичайні інструменти, наприклад бібліотеку
          Axios. HTTP-запити можна виконувати як за подією, наприклад, при кліку
          на елементі чи відправці форми, так і без очікування дій користувача,
          тобто при монтажі компонента. У останньому випадку використовується
          ефект, який виконується після етапу монтажу, оскільки компонент вже
          був відображений у DOM і готовий до подальшого оновлення стану.
          Наприклад, при монтажі ми будемо робити запити на Hacker News API та
          відображати список посилань на статті.
        </p>
      </div>
      <form ref={formRef} style={formStyles}>
        <input type="email" placeholder="Your email" />
        <button>Schedule now</button>
      </form>
      <div>
        <p style={textStyle}>
          ндикатор завантаження Під час виконання HTTP-запиту користувач замість
          компонента бачить порожній блок інтерфейсу, що абсолютно не
          інформативно. Тому під час HTTP-запиту потрібно відображати індикатор
          завантаження. Індикатор видно, доки запит виконується, і як тільки він
          завершується, індикатор приховується, а замість нього відображається
          компонент із завантаженими даними.
        </p>
        <p style={textStyle}>
          У React немає вбудованого модуля для роботи з HTTP-запитами, тому ми
          можемо використовувати звичайні інструменти, наприклад бібліотеку
          Axios. HTTP-запити можна виконувати як за подією, наприклад, при кліку
          на елементі чи відправці форми, так і без очікування дій користувача,
          тобто при монтажі компонента. У останньому випадку використовується
          ефект, який виконується після етапу монтажу, оскільки компонент вже
          був відображений у DOM і готовий до подальшого оновлення стану.
          Наприклад, при монтажі ми будемо робити запити на Hacker News API та
          відображати список посилань на статті.
        </p>
      </div>
    </>
  );
}
